<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <contextName>logback</contextName>

    <!-- 指定日志输出路径 -->
    <property name="logging.file.path" value="logs" />

    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="applicationName" class="org.springframework.boot.logging.logback.ApplicationNameConverter" />
    <conversionRule conversionWord="clr" class="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="correlationId" class="org.springframework.boot.logging.logback.CorrelationIdConverter" />
    <conversionRule conversionWord="wex" class="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" class="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    
    <!-- https://logback.qos.ch/manual/layouts.html -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr(%applicationName[%15.15t]){faint} %clr(${LOG_CORRELATION_PATTERN:-}){faint}%clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="CONSOLE_LOG_CHARSET" value="${CONSOLE_LOG_CHARSET:-${file.encoding:-UTF-8}}"/>
    <property name="CONSOLE_LOG_THRESHOLD" value="${CONSOLE_LOG_THRESHOLD:-TRACE}"/>
    <!-- 日志文件的格式：日期时间 日志级别 进程ID 分隔符 线程名称 日志记录器名称 消息内容和换行符 异常信息 -->
    <property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- %applicationName[%t] ${LOG_CORRELATION_PATTERN:-}%-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="FILE_LOG_CHARSET" value="${FILE_LOG_CHARSET:-${file.encoding:-UTF-8}}"/>
    <property name="FILE_LOG_THRESHOLD" value="${FILE_LOG_THRESHOLD:-TRACE}"/>
    
    <!-- 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>${CONSOLE_LOG_THRESHOLD}</level>
        </filter>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>${CONSOLE_LOG_CHARSET}</charset>
        </encoder>
    </appender>
    
    <springProfile name="dev">
        <root level="INFO">
            <appender-ref ref="CONSOLE" />
        </root>
    </springProfile>
    
    <springProfile name="test | prod">
        <!-- INFO 日志输入到文件 -->
        <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 此日志文档只记录 info 级别的 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <!-- 过滤的级别 -->
                <level>info</level>
                <!-- 匹配时的操作：接收（记录） -->
                <onMatch>ACCEPT</onMatch>
                <!-- 不匹配时的操作：拒绝（不记录） -->
                <onMismatch>DENY</onMismatch>
            </filter>
            <!-- 日志文档输出格式 -->
            <encoder>
                <pattern>${FILE_LOG_PATTERN}</pattern>
                <charset>${FILE_LOG_CHARSET}</charset>
            </encoder>
            <!-- 正在记录的日志文档的路径及文档名 -->
            <file>${logging.file.path}/info.log</file>
            <!-- 滚动策略，基于文件大小和时间创建日志文件 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <!-- 日志文件名格式 -->
                <fileNamePattern>${logging.file.path}/info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <!-- 启动时是否清空日志文件 -->
                <cleanHistoryOnStart>false</cleanHistoryOnStart>
                <!-- 最大文件大小，默认100M -->
                <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:-100MB}</maxFileSize>
                <!-- 总大小容量，默认10GB -->
                <totalSizeCap>${LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-10GB}</totalSizeCap>
                <!-- 日志最大的历史 默认60天 -->
                <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-60}</maxHistory>
            </rollingPolicy>
        </appender>
        
        <!-- WARN 日志输入到文件 -->
        <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 此日志文档只记录 warn 级别的 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <!-- 过滤的级别 -->
                <level>warn</level>
                <!-- 匹配时的操作：接收（记录） -->
                <onMatch>ACCEPT</onMatch>
                <!-- 不匹配时的操作：拒绝（不记录） -->
                <onMismatch>DENY</onMismatch>
            </filter>
            <!-- 日志文档输出格式 -->
            <encoder>
                <pattern>${FILE_LOG_PATTERN}</pattern>
                <charset>${FILE_LOG_CHARSET}</charset>
            </encoder>
            <!-- 正在记录的日志文档的路径及文档名 -->
            <file>${logging.file.path}/warn.log</file>
            <!-- 滚动策略 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <!-- 日志文件名格式 -->
                <fileNamePattern>${logging.file.path}/warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <!-- 启动时是否清空日志文件 -->
                <cleanHistoryOnStart>false</cleanHistoryOnStart>
                <!-- 最大文件大小，默认100M -->
                <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:-100MB}</maxFileSize>
                <!-- 总大小容量，默认10GB -->
                <totalSizeCap>${LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-10GB}</totalSizeCap>
                <!-- 日志最大的历史 默认60天 -->
                <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-60}</maxHistory>
            </rollingPolicy>
        </appender>
        
        <!-- ERROR 日志输入到文件 -->
        <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 此日志文档只记录 error 级别的 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <!-- 过滤的级别 -->
                <level>error</level>
                <!-- 匹配时的操作：接收（记录） -->
                <onMatch>ACCEPT</onMatch>
                <!-- 不匹配时的操作：拒绝（不记录） -->
                <onMismatch>DENY</onMismatch>
            </filter>
            <!-- 日志文档输出格式 -->
            <encoder>
                <pattern>${FILE_LOG_PATTERN}</pattern>
                <charset>${FILE_LOG_CHARSET}</charset>
            </encoder>
            <!-- 正在记录的日志文档的路径及文档名 -->
            <file>${logging.file.path}/error.log</file>
            <!-- 滚动策略 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <!-- 日志文件名格式 -->
                <fileNamePattern>${logging.file.path}/error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <!-- 启动时是否清空日志文件 -->
                <cleanHistoryOnStart>false</cleanHistoryOnStart>
                <!-- 最大文件大小，默认100M -->
                <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:-100MB}</maxFileSize>
                <!-- 总大小容量，默认10GB -->
                <totalSizeCap>${LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-10GB}</totalSizeCap>
                <!-- 日志最大的历史 默认60天 -->
                <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-60}</maxHistory>
            </rollingPolicy>
        </appender>
        
        <root level="INFO">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="INFO_FILE" />
            <appender-ref ref="WARN_FILE" />
            <appender-ref ref="ERROR_FILE" />
        </root>
    </springProfile>
    
    <logger name="org.apache.catalina.startup.DigesterFactory" level="ERROR"/>
    <logger name="org.apache.catalina.util.LifecycleBase" level="ERROR"/>
    <logger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN"/>
    <logger name="org.apache.sshd.common.util.SecurityUtils" level="WARN"/>
    <logger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN"/>
    <logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="ERROR"/>
    <logger name="org.hibernate.validator.internal.util.Version" level="WARN"/>
    <logger name="org.springframework.boot.actuate.endpoint.jmx" level="WARN"/>
    <logger name="org.quartz" level="ERROR" />

</configuration>